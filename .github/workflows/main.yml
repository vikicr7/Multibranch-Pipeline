name: CI/CD Pipeline

on:
  push:
    branches: 
      - master
      - developer

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ---- Checkout ----
      - name: Checkout Code
        uses: actions/checkout@v4

      # ---- Set Branch Name ----
      - name: Set Branch Name
        id: vars
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      # ---- Build Docker Image ----
      - name: Build Docker Image
        run: |
          if [ "${{ steps.vars.outputs.branch }}" = "master" ]; then
            docker build -t vikicr7/masterimage:latest .
            docker tag vikicr7/masterimage:latest vikicr7/masterimage:${{ github.run_number }}
          elif [ "${{ steps.vars.outputs.branch }}" = "developer" ]; then
            docker build -t vikicr7/devimage:latest .
            docker tag vikicr7/devimage:latest vikicr7/devimage:${{ github.run_number }}
          fi

      # ---- Install Trivy ----
      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb stable main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      # ---- Trivy Scan Local Image ----
      - name: Trivy Scan Local Image
        run: |
          if [ "${{ steps.vars.outputs.branch }}" = "master" ]; then
            trivy image --exit-code 0 --severity HIGH,CRITICAL vikicr7/masterimage:latest
          else
            trivy image --exit-code 0 --severity HIGH,CRITICAL vikicr7/devimage:latest
          fi

      # ---- Docker Login ----
      - name: Docker Login
        run: echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

      # ---- Push Docker Image ----
      - name: Push Docker Image
        run: |
          if [ "${{ steps.vars.outputs.branch }}" = "master" ]; then
            docker push vikicr7/masterimage:latest
            docker push vikicr7/masterimage:${{ github.run_number }}
          elif [ "${{ steps.vars.outputs.branch }}" = "developer" ]; then
            docker push vikicr7/devimage:latest
            docker push vikicr7/devimage:${{ github.run_number }}
          fi

      # ---- Deploy Container (Optional) ----
      - name: Deploy on Docker
        run: |
          if [ "${{ steps.vars.outputs.branch }}" = "master" ]; then
            docker rm -f masterapp || true
            docker run -d --name masterapp -p 8010:80 vikicr7/masterimage:latest
          elif [ "${{ steps.vars.outputs.branch }}" = "developer" ]; then
            docker rm -f devapp || true
            docker run -d --name devapp -p 8020:80 vikicr7/devimage:latest
          fi

      # ---- Cleanup Old Docker Images ----
      - name: Cleanup Old Docker Images
        run: |
          if [ "${{ steps.vars.outputs.branch }}" = "master" ]; then
            docker images "vikicr7/masterimage" --format "{{.Repository}}:{{.Tag}}" \
              | grep -v "latest" \
              | grep -v "${{ github.run_number }}" \
              | xargs -r docker rmi -f
          else
            docker images "vikicr7/devimage" --format "{{.Repository}}:{{.Tag}}" \
              | grep -v "latest" \
              | grep -v "${{ github.run_number }}" \
              | xargs -r docker rmi -f
          fi

          docker image prune -f
